import { e2a } from './convert';
/**
 * Common utility functions
 */
/**
 * Simple debounce; useful when no stream is at play
 */
export function debounce(func, wait, immediate) {
    if (wait === void 0) { wait = 0; }
    if (immediate === void 0) { immediate = false; }
    var timeout = null;
    return function () {
        var context = this;
        var args = arguments;
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(function () {
            timeout = null;
            if (!immediate)
                func.apply(context, args);
        }, wait);
        if (callNow)
            func.apply(context, args);
    };
}
/**
 * Deep copy an object, albeit not terribly efficiently
 */
export function deepCopy(obj) {
    return JSON.parse(JSON.stringify(obj));
}
/**
 * Dump buffer
 */
export function dump(data, title, ebcdic, color) {
    if (ebcdic === void 0) { ebcdic = false; }
    if (color === void 0) { color = 'blue'; }
    var sliceSize = 32;
    var offset = 0;
    var total = data.length;
    console.groupCollapsed("%c" + title + " " + (ebcdic ? '(EBCDIC-encoded)' : ''), "color: " + color);
    console.log('%c      00       04       08       0c       10       14       18       1c        00  04  08  0c  10  14  18  1c  ', 'font-weight: bold');
    while (true) {
        var slice = new Uint8Array(data.slice(offset, Math.min(offset + sliceSize, total)));
        var _a = dumpSlice(slice, sliceSize, ebcdic), hex = _a.hex, str = _a.str;
        console.log("%c" + toHex(offset, 4) + ": %c" + hex + " %c" + str, 'font-weight: bold', 'color: black', 'color: grey');
        // setup for next time
        if (slice.length < sliceSize)
            break;
        offset += sliceSize;
    }
    console.groupEnd();
}
function dumpSlice(bytes, sliceSize, ebcdic) {
    var hex = '';
    var str = '';
    var ix = 0;
    // decode to hex and string equiv
    for (; ix < bytes.length; ix++) {
        var byte = bytes[ix];
        hex += "" + toHex(byte, 2);
        var char = ebcdic ? e2a(new Uint8Array([byte])) : String.fromCharCode(byte);
        // NOTE: use special character in string as a visual aid to counting
        str += ((char === '\u00a0') || (char === ' ')) ? '\u2022' : char;
        if ((ix > 0) && ((ix % 4) === 3))
            hex += ' ';
    }
    // pad remainder of slice
    for (; ix < sliceSize; ix++) {
        hex += '  ';
        str += ' ';
        if ((ix > 0) && ((ix % 4) === 3))
            hex += ' ';
    }
    return { hex: hex, str: str };
}
/**
 * Is this object empty?
 */
export function isObjectEmpty(obj) {
    return (Object.getOwnPropertyNames(obj).length === 0);
}
/**
 * Run code on next tick
 */
export function nextTick(f) {
    setTimeout(f, 0);
}
/**
 * Simple map reversal
 */
export function reverseMap(obj) {
    return Object.keys(obj).reduce(function (acc, k) {
        acc[String(obj[k])] = k;
        return acc;
    }, {});
}
/**
 * Convert to hex, with padding
 */
export function toHex(num, pad) {
    var padding = '0000000000000000'.substring(0, pad);
    var hex = num.toString(16);
    return padding.substring(0, padding.length - hex.length) + hex;
}

//# sourceMappingURL=data:application/json;base64,