import { animate, group, query, state, style, transition, trigger } from '@angular/animations';
/**
 * Common animation functions
 */
export function inOutAnimation() {
    return trigger('inOut', [
        transition('* => *', [
            group([
                query(':enter', [
                    style({ opacity: 0 }),
                    animate('0.33s ease-in-out', style({ opacity: 1 }))
                ], { optional: true, limit: 1 }),
                query(':leave', [
                    animate('0.33s ease-in-out', style({ opacity: 0 }))
                ], { optional: true, limit: 1 })
            ])
        ])
    ]);
}
export function routeAnimation() {
    return trigger('routeAnimation', [
        transition(':enter', []),
        transition('* => *', [
            group([
                query(':enter', [
                    style({
                        'background-color': 'white',
                        overflow: 'hidden',
                        transform: 'translateX(-100%)',
                        width: '100%'
                    }),
                    animate('0.33s ease-in-out', style({ transform: 'translateX(0%)' }))
                ], { optional: true, limit: 1 }),
                query(':leave', [
                    style({
                        left: 0,
                        position: 'absolute',
                        top: 0,
                        width: '100%',
                        'z-index': -1,
                    }),
                    animate('0.33s ease-in-out', style({ transform: 'translateX(100%)' }))
                ], { optional: true, limit: 1 })
            ])
        ])
    ]);
}
export function showHideAnimation() {
    return trigger('showHide', [
        state('shown', style({ height: '*', opacity: 1 })),
        state('hidden', style({ height: 0, opacity: 0 })),
        transition('* => *', animate('0.25s ease-in-out'))
    ]);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYW5pbWF0aW9ucy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFRL0YsTUFBTTtJQUNKLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ3RCLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDbkIsS0FBSyxDQUFDO2dCQUNKLEtBQUssQ0FBQyxRQUFRLEVBQUU7b0JBQ2QsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDO29CQUNuQixPQUFPLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7aUJBQ2xELEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQztnQkFDOUIsS0FBSyxDQUFDLFFBQVEsRUFBRTtvQkFDZCxPQUFPLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7aUJBQ2xELEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQzthQUMvQixDQUFDO1NBQ0gsQ0FBQztLQUNILENBQUMsQ0FBQztDQUNKO0FBRUQsTUFBTTtJQUNKLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUU7UUFDL0IsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7UUFDeEIsVUFBVSxDQUFDLFFBQVEsRUFBRTtZQUNuQixLQUFLLENBQUM7Z0JBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRTtvQkFDZCxLQUFLLENBQUM7d0JBQ0osa0JBQWtCLEVBQUUsT0FBTzt3QkFDM0IsUUFBUSxFQUFFLFFBQVE7d0JBQ2xCLFNBQVMsRUFBRSxtQkFBbUI7d0JBQzlCLEtBQUssRUFBRSxNQUFNO3FCQUNkLENBQUM7b0JBQ0YsT0FBTyxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxFQUFDLFNBQVMsRUFBRSxnQkFBZ0IsRUFBQyxDQUFDLENBQUM7aUJBQ25FLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQztnQkFDOUIsS0FBSyxDQUFDLFFBQVEsRUFBRTtvQkFDZCxLQUFLLENBQUM7d0JBQ0osSUFBSSxFQUFFLENBQUM7d0JBQ1AsUUFBUSxFQUFFLFVBQVU7d0JBQ3BCLEdBQUcsRUFBRSxDQUFDO3dCQUNOLEtBQUssRUFBRSxNQUFNO3dCQUNiLFNBQVMsRUFBRSxDQUFDLENBQUM7cUJBQ2QsQ0FBQztvQkFDRixPQUFPLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFDLENBQUMsQ0FBQztpQkFDckUsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDO2FBQy9CLENBQUM7U0FDSCxDQUFDO0tBQ0gsQ0FBQyxDQUFDO0NBQ0o7QUFHRCxNQUFNO0lBQ0osTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7UUFDekIsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ2hELEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUMvQyxVQUFVLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQ25ELENBQUMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgZ3JvdXAsIHF1ZXJ5LCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgQW5pbWF0aW9uRW50cnlNZXRhZGF0YSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIENvbW1vbiBhbmltYXRpb24gZnVuY3Rpb25zXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGluT3V0QW5pbWF0aW9uKCk6IEFuaW1hdGlvbkVudHJ5TWV0YWRhdGEge1xuICByZXR1cm4gdHJpZ2dlcignaW5PdXQnLCBbXG4gICAgdHJhbnNpdGlvbignKiA9PiAqJywgW1xuICAgICAgZ3JvdXAoW1xuICAgICAgICBxdWVyeSgnOmVudGVyJywgW1xuICAgICAgICAgIHN0eWxlKHtvcGFjaXR5OiAwfSksXG4gICAgICAgICAgYW5pbWF0ZSgnMC4zM3MgZWFzZS1pbi1vdXQnLCBzdHlsZSh7b3BhY2l0eTogMX0pKVxuICAgICAgICBdLCB7b3B0aW9uYWw6IHRydWUsIGxpbWl0OiAxfSksXG4gICAgICAgIHF1ZXJ5KCc6bGVhdmUnLCBbXG4gICAgICAgICAgYW5pbWF0ZSgnMC4zM3MgZWFzZS1pbi1vdXQnLCBzdHlsZSh7b3BhY2l0eTogMH0pKVxuICAgICAgICBdLCB7b3B0aW9uYWw6IHRydWUsIGxpbWl0OiAxfSlcbiAgICAgIF0pXG4gICAgXSlcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3V0ZUFuaW1hdGlvbigpOiBBbmltYXRpb25FbnRyeU1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoJ3JvdXRlQW5pbWF0aW9uJywgW1xuICAgIHRyYW5zaXRpb24oJzplbnRlcicsIFtdKSxcbiAgICB0cmFuc2l0aW9uKCcqID0+IConLCBbXG4gICAgICBncm91cChbXG4gICAgICAgIHF1ZXJ5KCc6ZW50ZXInLCBbXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiAnd2hpdGUnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMTAwJSknLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGFuaW1hdGUoJzAuMzNzIGVhc2UtaW4tb3V0Jywgc3R5bGUoe3RyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCUpJ30pKVxuICAgICAgICBdLCB7b3B0aW9uYWw6IHRydWUsIGxpbWl0OiAxfSksXG4gICAgICAgIHF1ZXJ5KCc6bGVhdmUnLCBbXG4gICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICd6LWluZGV4JzogLTEsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgYW5pbWF0ZSgnMC4zM3MgZWFzZS1pbi1vdXQnLCBzdHlsZSh7dHJhbnNmb3JtOiAndHJhbnNsYXRlWCgxMDAlKSd9KSlcbiAgICAgICAgXSwge29wdGlvbmFsOiB0cnVlLCBsaW1pdDogMX0pXG4gICAgICBdKVxuICAgIF0pXG4gIF0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93SGlkZUFuaW1hdGlvbigpOiBBbmltYXRpb25FbnRyeU1ldGFkYXRhIHtcbiAgcmV0dXJuIHRyaWdnZXIoJ3Nob3dIaWRlJywgW1xuICAgIHN0YXRlKCdzaG93bicsIHN0eWxlKHtoZWlnaHQ6ICcqJywgb3BhY2l0eTogMX0pKSxcbiAgICBzdGF0ZSgnaGlkZGVuJywgc3R5bGUoe2hlaWdodDogMCwgb3BhY2l0eTogMH0pKSxcbiAgICB0cmFuc2l0aW9uKCcqID0+IConLCBhbmltYXRlKCcwLjI1cyBlYXNlLWluLW91dCcpKVxuICBdKTtcbn1cbiJdfQ==